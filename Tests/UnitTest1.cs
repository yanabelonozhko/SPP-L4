using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NUnit.Framework;

namespace Tests
{
    public class Tests
    {
        private Generator.Generator _generator = new();

        [Test]
        public void TClassQuantity()
        {
            var classes = _generator.Generate(Code1 + Code2);
            Assert.That(classes, Has.Count.EqualTo(2));

            foreach (var tclass in classes)
            {
                var parsedClass = CSharpSyntaxTree.ParseText(tclass.TestsFile).GetCompilationUnitRoot();
                Assert.That(parsedClass.DescendantNodes().OfType<ClassDeclarationSyntax>().ToList(), Has.Count.EqualTo(1));
            }
        }

        [Test]
        public void GeneratedMethodsCountTest()
        {
            var classes = _generator.Generate(Code1);
            Assert.That(classes, Has.Count.EqualTo(1));
            var parsedCl = CSharpSyntaxTree.ParseText(classes[0].TestsFile).GetCompilationUnitRoot();
            var methods = parsedCl.DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();
            Assert.That(methods, Has.Count.EqualTo(2));

            classes = _generator.Generate(Code2);
            Assert.That(classes, Has.Count.EqualTo(1));
            parsedCl = CSharpSyntaxTree.ParseText(classes[0].TestsFile).GetCompilationUnitRoot();
            methods = parsedCl.DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();
            Assert.That(methods, Has.Count.EqualTo(3));
        }

        [Test]
        public void TOverloadedMethod()
        {
            var classTests = _generator.Generate(Code2);
            Assert.That(classTests, Has.Count.EqualTo(1));
            var parsedClass = CSharpSyntaxTree.ParseText(classTests[0].TestsFile).GetCompilationUnitRoot();
            var methods = parsedClass.DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();

            Assert.That(methods, Has.Count.EqualTo(3));
            Assert.Multiple(() =>
            {
                Assert.That(methods[1].Identifier.Text, Is.EqualTo("Sum0Test"));
                Assert.That(methods[2].Identifier.Text, Is.EqualTo("Sum1Test"));
            });
        }

        [Test]
        public void TStaticVoidMethodBody()
        {
            var classTests = _generator.Generate(Code1);
            Assert.That(classTests, Has.Count.GreaterThanOrEqualTo(1));
            var parsedClass = CSharpSyntaxTree.ParseText(classTests[0].TestsFile).GetCompilationUnitRoot();
            var methods = parsedClass.DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();
            Assert.That(methods, Has.Count.GreaterThanOrEqualTo(2));

            var methodBody = methods[0].Body;
            Assert.That(methodBody, Is.Not.Null);
            var statements = methodBody!.Statements;
            Assert.That(statements, Has.Count.EqualTo(3));
            Assert.Multiple(() =>
            {
                Assert.That(statements[0].ToString(), Is.EqualTo("string[] args = default;"));
                Assert.That(statements[1].ToString(), Is.EqualTo("Program.Main(args);"));
                Assert.That(statements[2].ToString(), Is.EqualTo("Assert.Fail(\"autogenerated\");"));
            });
        }

        [Test]
        public void TNonStaticMethodBody()
        {
            var classTests = _generator.Generate(Code1);
            Assert.That(classTests, Has.Count.GreaterThanOrEqualTo(1));
            var parsedClass = CSharpSyntaxTree.ParseText(classTests[0].TestsFile).GetCompilationUnitRoot();
            var methods = parsedClass.DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();
            Assert.That(methods, Has.Count.GreaterThanOrEqualTo(2));

            var methodBody = methods[1].Body;
            Assert.That(methodBody, Is.Not.Null);
            var statements = methodBody!.Statements;
            Assert.That(statements, Has.Count.EqualTo(4));
            Assert.Multiple(() =>
            {
                Assert.That(statements[0].ToString(), Is.EqualTo("var actual = _program.ReadNum();"));
                Assert.That(statements[1].ToString(), Is.EqualTo("int expected = default;"));
                Assert.That(statements[2].ToString(), Is.EqualTo("Assert.That(actual, Is.EqualTo(expected));"));
                Assert.That(statements[3].ToString(), Is.EqualTo("Assert.Fail(\"autogenerated\");"));
            });
        }

        [Test]
        public void TNamespaceName()
        {
            var classes = _generator.Generate(Code2);
            Assert.That(classes, Has.Count.GreaterThanOrEqualTo(1));
            var parsed = CSharpSyntaxTree.ParseText(classes[0].TestsFile).GetCompilationUnitRoot();
            var namespaceDecl = parsed.DescendantNodes().OfType<NamespaceDeclarationSyntax>().ToList();
            Assert.That(namespaceDecl, Has.Count.EqualTo(2));
            Assert.Multiple(() =>
            {
                Assert.That(namespaceDecl[0].Name.ToString(), Is.EqualTo("Second"));
                Assert.That(namespaceDecl[1].Name.ToString(), Is.EqualTo("InnerSecond.Tests"));
            });
        }

        private const string Code1 = @"
        namespace First
        {
            public class Program
            {
                private Random _rnd;
                
                public Program(int num)
                {
                    _rnd = new Random(num);
                }
                
                public static void Main(string[] args)
                {
                    Console.WriteLine(""hello, world!"");
                }
             
                public int ReadNum()
                {
                    int a = Console.Read();
                    return a;
                }
            }
        }";

        private const string Code2 = @"
        namespace Second
        {
            namespace InnerSecond
            {
                public class Program
                {
                    public static void Main(string[] args)
                    {
                        Console.WriteLine(""hello, world!"");
                    }

                    public int Sum(int x)
                    {
                        return x + 5;
                    }

                    public double Sum(double x)
                    {
                        return x + 0.05;
                    }
                }
            }
        }";
    }
}